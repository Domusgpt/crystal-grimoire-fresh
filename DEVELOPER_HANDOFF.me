# Crystal Grimoire – Developer Handoff (April 2025 refresh)

_Additional roadmap detail now lives in `docs/RELEASE_PLAN.md`; use it alongside this handoff when planning work._

## 1. What’s Working Right Now
- **Authentication**: Email/password flows succeed via `AuthService`; Google and Apple providers are coded but require proper OAuth configuration and testing.【F:lib/services/auth_service.dart†L1-L402】 Firestore rules require `email_verified == true`, so confirm verification or adjust rules for dev accounts.【F:firestore.rules†L1-L40】
- **Home & Navigation**: `HomeScreen` links to feature modules, applying the glassmorphic theme and animated background.【F:lib/screens/home_screen.dart†L1-L214】
- **Crystal Identification**: UI captures an image (camera/gallery) and calls the callable Function `identifyCrystal`. Success depends on `gemini.api_key` being set in Functions config and Cloud Firestore permissions.【F:lib/screens/crystal_identification_screen.dart†L1-L214】【F:functions/index.js†L400-L513】
- **Collections**: `CollectionServiceV2` syncs `users/{uid}/collection` and caches entries in `SharedPreferences`; it expects `crystal_library` records to exist so it can hydrate full crystal metadata.【F:lib/services/collection_service_v2.dart†L1-L401】
- **Dream Journal**: Reads `users/{uid}/dreams` and optionally calls `analyzeDream` to append AI output.【F:lib/screens/dream_journal_screen.dart†L1-L203】【F:functions/index.js†L1020-L1195】
- **Moon rituals & healing**: Callable-backed flows persist the user intention, sync it to Firestore for cross-device continuity, surface moon metadata, and highlight when the collection lacks crystals required for a layout, falling back to curated copy on failures.【F:lib/screens/moon_rituals_screen.dart†L1-L400】【F:lib/screens/crystal_healing_screen.dart†L1-L835】【F:lib/services/ritual_preference_service.dart†L1-L200】

## 2. Known Gaps / Do Not Ship As-Is
- **Callable Cloud Functions**: The client hits `earnSeerCredits`, `spendSeerCredits`, `generateHealingLayout`, `getMoonRituals`, `checkCrystalCompatibility`, and `getCrystalCare`; these now exist in `functions/index.js` but require staging config (Gemini + Stripe), quota monitoring, and UI fallbacks for failures.【F:lib/services/crystal_service.dart†L129-L276】【F:lib/services/economy_service.dart†L1-L220】
- **Payments**: `EnhancedPaymentService` is now Stripe-only. Provide publishable/secret keys and price IDs, exercise the `createStripeCheckoutSession` ➜ `finalizeStripeCheckoutSession` path, and hide the subscription screen if keys are missing.【F:lib/services/enhanced_payment_service.dart†L1-L320】【F:functions/index.js†L900-L1150】
- **Advanced AI Services**: `UnifiedAIService`, `EnhancedAIService`, and `FirebaseExtensionsService` target bespoke backends (Vertex AI, custom Cloud Functions) that are not available. Remove or guard entry points until real endpoints exist.【F:lib/services/unified_ai_service.dart†L1-L200】【F:lib/services/firebase_extensions_service.dart†L1-L200】
- **Build Verification**: Run `flutter analyze`/`flutter test` locally after configuring Stripe keys—the codebase no longer depends on RevenueCat/Firebase AI stubs, but the build has not been revalidated in this container environment.【F:lib/services/enhanced_payment_service.dart†L1-L320】【F:test/widget_test.dart†L1-L40】
- **Documentation Drift**: Prior README/guide files advertised a production-ready app. Rely on this handoff, `docs/APP_ASSESSMENT.md`, and `DEPLOYMENT_GUIDE.md` for accurate status.

## 3. Local Environment Setup
1. **Tooling**: Flutter 3.19+, Dart 3.3+, Node.js 20, Firebase CLI, and `dart pub global activate flutterfire_cli` if you need to regenerate configs.【F:pubspec.yaml†L5-L22】
2. **Dependencies**:
   ```bash
   flutter pub get
   npm install --prefix functions
   ```
   Provide Stripe publishable/secret keys plus price IDs via `EnvironmentConfig` and `firebase functions:config:set` so the subscription flow can execute.
3. **Firebase Project**:
   - Set `firebase use <project-id>` (default config references `crystal-grimoire-2025`).【F:firebase.json†L1-L33】
   - Populate runtime config: `firebase functions:config:set gemini.api_key=... stripe.secret_key=... stripe.premium_price_id=...`
4. **Secrets / Env**: Pass `--dart-define` values (`GEMINI_API_KEY`, optional `OPENAI_API_KEY`, `CLAUDE_API_KEY`, `GROQ_API_KEY`, `STRIPE_PUBLISHABLE_KEY`, `REVENUECAT_API_KEY`) when running `flutter run -d chrome`.
5. **Data Seeding**: Create `crystal_library` documents (use `scripts/seed_database.js` with a service account JSON) so Collection hydration works.【F:scripts/seed_database.js†L1-L80】 Review Firestore rules while seeding; they enforce tight schemas.【F:firestore.rules†L37-L120】

## 4. Priority Backlog
1. **Restore Build Green**
   - Verify the Stripe-only payment service compiles and run `flutter analyze`/`flutter test` once tooling is available.
   - Update the widget test to bootstrap `CrystalGrimoireApp` or replace it with a smoke test for `HomeScreen`.
2. **Solidify Core Loop (MVP scope)**
   - Auth (email/password + verified email), crystal identification, and collection management must succeed without runtime errors.
   - Provide graceful error messaging when Cloud Functions reject requests (e.g., permission denied).
3. **Backend Completeness**
   - Implement callable Functions for credits/economy and moon/healing guidance, or feature-flag those UI elements off.
   - Audit security rules vs. actual document shapes; align the client writes accordingly.
4. **Payments & Subscriptions**
   - Exercise the Stripe Checkout flow end-to-end (session creation ➜ redirect ➜ `finalizeStripeCheckoutSession`) before surfacing subscriptions to testers.
   - Ensure Stripe checkout sessions are verified and plan data is stored as expected (`users/{uid}/plan/active`); add native IAP support later if required.【F:functions/index.js†L900-L1150】
5. **Documentation & Observability**
   - Keep `docs/APP_ASSESSMENT.md` in sync.
   - Add logging/monitoring for Cloud Functions (currently console logs only) and consider Firebase Performance or Crashlytics for future mobile builds.

## 5. Troubleshooting Tips
- **Firestore Permission Errors**: Inspect the console for `permission-denied`. Either verify the user email or relax rules in a sandbox project while iterating.
- **Function Failures**: Use `firebase functions:log` or run the emulator suite (`firebase emulators:start --only functions,firestore`) with test API keys to debug.
- **SharedPreferences on Web**: Cached data (collection, settings) persists across sessions. Clear via devtools if you need a clean slate.
- **Marketplace**: Listings land in a `pending_review` state via the callable Function with a 12-hour cooldown; admins (custom claim `role: admin`) can now approve or reject submissions from the in-app review tab. Provision claims, moderation policy, and Stripe keys before enabling real purchases.

Update this handoff whenever you ship a feature, retire dead code, or change deployment processes so the next engineer has an accurate picture.
