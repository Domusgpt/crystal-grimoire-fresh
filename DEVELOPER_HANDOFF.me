# Crystal Grimoire – Developer Handoff (April 2025 refresh)

_Additional roadmap detail now lives in `docs/RELEASE_PLAN.md`; use it alongside this handoff when planning work._

## 1. What’s Working Right Now
- **Authentication**: Email/password flows succeed via `AuthService`; Google and Apple providers are coded but require proper OAuth configuration and testing.【F:lib/services/auth_service.dart†L1-L402】 Firestore rules require `email_verified == true`, so confirm verification or adjust rules for dev accounts.【F:firestore.rules†L1-L40】
- **Home & Navigation**: `HomeScreen` links to feature modules, applying the glassmorphic theme and animated background.【F:lib/screens/home_screen.dart†L1-L214】
- **Crystal Identification**: UI captures an image (camera/gallery) and calls the callable Function `identifyCrystal`. Success depends on `gemini.api_key` being set in Functions config and Cloud Firestore permissions.【F:lib/screens/crystal_identification_screen.dart†L1-L214】【F:functions/index.js†L400-L513】
- **Collections**: `CollectionServiceV2` syncs `users/{uid}/collection` and caches entries in `SharedPreferences`; it expects `crystal_library` records to exist so it can hydrate full crystal metadata.【F:lib/services/collection_service_v2.dart†L1-L401】
- **Dream Journal**: Reads `users/{uid}/dreams` and optionally calls `analyzeDream` to append AI output.【F:lib/screens/dream_journal_screen.dart†L1-L203】【F:functions/index.js†L1020-L1195】
- **Moon Rituals & Healing**: Screens fetch phase guidance, chakra placements, breathwork, and integration steps from new Cloud Functions. If the API fails, they fall back to local templates and surface warnings.【F:lib/screens/moon_rituals_screen.dart†L1-L420】【F:lib/screens/crystal_healing_screen.dart†L1-L420】

## 2. Known Gaps / Do Not Ship As-Is
- **Stripe configuration & checkout QA**: The Stripe-only payment helper expects publishable key Dart defines plus Functions config for the secret and price IDs; checkout flows will fail until real keys and webhook verification are supplied.【F:lib/services/enhanced_payment_service.dart†L14-L121】【F:functions/index.js†L946-L1175】
- **Entitlement gating**: Premium and credit-based experiences remain visible even when the cached plan tier is `free`; add guards before letting testers trigger paid flows.【F:lib/services/economy_service.dart†L1-L220】【F:lib/screens/subscription_screen.dart†L1-L360】
- **Strict auth rules & runtime drift**: Firestore rules still require `email_verified == true`, and the declared Functions runtime (Node 20) conflicts with `functions/package.json` (Node 22). Align before any deploy or non-verified testers will hit `permission-denied`.【F:firestore.rules†L1-L120】【F:firebase.json†L7-L20】【F:functions/package.json†L1-L17】
- **Data seeding requirements**: Collection hydration plus the new lunar/healing flows expect canonical documents in `crystal_library`; without them, the UI renders empty cards or fallback templates.【F:lib/services/collection_service_v2.dart†L142-L212】【F:lib/screens/moon_rituals_screen.dart†L173-L282】
- **Compile blockers**: `FirebaseExtensionsService` still references `currentUserToken`/`currentUserId` getters that the production `FirebaseService` does not expose, so Flutter builds fail until you remove or refactor that service.【F:lib/services/firebase_extensions_service.dart†L30-L84】【F:lib/services/firebase_service.dart†L19-L64】

## 3. Local Environment Setup
1. **Tooling**: Flutter 3.19+, Dart 3.3+, Node.js 20, Firebase CLI, and `dart pub global activate flutterfire_cli` if you need to regenerate configs.【F:pubspec.yaml†L5-L22】
2. **Dependencies**:
   ```bash
   flutter pub get
   npm install --prefix functions
   ```
3. **Firebase Project**:
   - Set `firebase use <project-id>` (default config references `crystal-grimoire-2025`).【F:firebase.json†L1-L33】
   - Populate runtime config: `firebase functions:config:set gemini.api_key=... stripe.secret_key=... stripe.premium_price_id=...`
4. **Secrets / Env**: Pass `--dart-define` values (`GEMINI_API_KEY`, `STRIPE_PUBLISHABLE_KEY`, optional `OPENAI_API_KEY`, `CLAUDE_API_KEY`, `GROQ_API_KEY`) when running `flutter run -d chrome`.
5. **Data Seeding**: Create `crystal_library` documents (use `scripts/seed_database.js` with a service account JSON) so Collection hydration works.【F:scripts/seed_database.js†L1-L80】 Review Firestore rules while seeding; they enforce tight schemas.【F:firestore.rules†L37-L120】

## 4. Priority Backlog
1. **Stripe readiness**
   - Provide live or staging publishable keys, secret keys, and price IDs; run `createStripeCheckoutSession` ➜ `finalizeStripeCheckoutSession` to confirm the `users/{uid}/plan/active` document updates correctly.【F:lib/services/enhanced_payment_service.dart†L88-L216】【F:functions/index.js†L946-L1175】
   - Add telemetry and UX for checkout failures so testers understand when Stripe is misconfigured.【F:lib/screens/subscription_screen.dart†L201-L360】
2. **Entitlement gating & limits**
   - Gate economy actions, dream analysis boosts, and other premium-only flows by checking the cached subscription tier before invoking backend calls.【F:lib/services/economy_service.dart†L1-L220】【F:lib/services/app_state.dart†L1-L200】
   - Expose copy/UI states that explain what becomes available after upgrading to reduce support noise.【F:lib/screens/subscription_screen.dart†L61-L200】
3. **Data readiness & tester access**
   - Seed `crystal_library`, `moonData`, and sample healing layouts so the new backend-driven screens render meaningful guidance.【F:lib/screens/moon_rituals_screen.dart†L173-L420】【F:scripts/seed_database.js†L1-L120】
   - Create verified tester accounts or temporarily relax `email_verified` checks for development projects to avoid `permission-denied` loops.【F:firestore.rules†L1-L120】
4. **Deployment hygiene**
   - Align the Node runtime declarations, replace the static hosting landing page with the Flutter `build/web` output, and remove the unused `/api/**` rewrite before launch.【F:firebase.json†L7-L25】
   - Resolve the `FirebaseExtensionsService` compile blocker or remove the feature entirely, then restore `flutter analyze`, `flutter test`, and `npm --prefix functions run lint` to green before merging future changes.【F:lib/services/firebase_extensions_service.dart†L30-L120】【F:test/widget_test.dart†L1-L40】

## 5. Troubleshooting Tips
- **Firestore Permission Errors**: Inspect the console for `permission-denied`. Either verify the user email or relax rules in a sandbox project while iterating.
- **Function Failures**: Use `firebase functions:log` or run the emulator suite (`firebase emulators:start --only functions,firestore`) with test API keys to debug.
- **SharedPreferences on Web**: Cached data (collection, settings) persists across sessions. Clear via devtools if you need a clean slate.
- **Marketplace**: Listing creation writes to Firestore immediately. Consider adding validation or hiding the tab until moderation/payment is defined.

Update this handoff whenever you ship a feature, retire dead code, or change deployment processes so the next engineer has an accurate picture.
